datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider        = "prisma-client-js"
  //binaryTargets   = ["native", "darwin"] // if macos
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  conversations ConversationParticipant[]
  messages      Message[]
  adminConversations Conversation[]
  emailVerified DateTime?
  imageUrl      String?
  latitude      Float?
  longitude     Float?
  bio           String?
  points        Int?      @default(0)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier    String
  token         String    @unique
  expires       DateTime

  @@unique([identifier, token])
}

model Conversation {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  bio           String?
  lng           Float?
  lat           Float?
  imageUrl      String?
  groupRadius   Int?
  adminId       String?     @db.ObjectId
  admin         User?        @relation(fields: [adminId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  participants  ConversationParticipant[]
  latestMessageId String?    @db.ObjectId @unique
  latestMessage  Message?   @relation(name: "latestConversationMessage",fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pinnedMessageId String?    @db.ObjectId @unique
  pinnedMessage  Message?    @relation(name: "pinnedConversationMessage",fields: [pinnedMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages      Message[]
}

model ConversationParticipant {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  userId        String     @unique @db.ObjectId
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversationId String    @unique @db.ObjectId
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  hasSeenLatest Boolean    @default(false)
}

model Message {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  conversationId  String     @db.ObjectId
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId        String     @db.ObjectId
  sender          User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  isLatestIn      Conversation? @relation(name: "latestConversationMessage")
  isPinnedIn      Conversation? @relation(name: "pinnedConversationMessage")
  createdAt       DateTime?   @default(now())
  updatedAt       DateTime?   @updatedAt
  body            String
}
